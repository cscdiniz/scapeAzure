{
	"name": "LoadSourceToDataLake",
	"properties": {
		"activities": [
			{
				"name": "For Each Active ETL",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ETL Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('ETL Table').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "RawFilePathName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "ObjectName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RawFilePath",
								"value": {
									"value": "@concat(formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'), '/', string(item().SinkFileName),'_', pipeline().parameters.executionId, '.', string(item().SinkFileFormat))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Copy API to Raw",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "StructuredFilePathName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings",
										"filePattern": "setOfObjects"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "StarRez",
									"type": "DatasetReference",
									"parameters": {
										"url": {
											"value": "@string(item().SourceUrl)",
											"type": "Expression"
										},
										"parameter": {
											"value": "@if(and(bool(item().IsIncrementalLoad), not(equals(coalesce(string(activity('Last Execution Date').output.value), '-1'), '-1'))), concat(string(item().SourceParameter), ' ', string(item().IncrementalLoadCondition), '''',activity('Last Execution Date').output.value['yyyy-MM-dd HH:mm:ss'], ''''), string(item().SourceParameter))",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ADLJson",
									"type": "DatasetReference",
									"parameters": {
										"Object": {
											"value": "@string(item().SinkFileName)",
											"type": "Expression"
										},
										"FileName": {
											"value": "@variables('RawFilePath')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "UpdateCurrentExecutionLog",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy API to Raw",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineFilePathName]",
								"storedProcedureParameters": {
									"ADLContainer": {
										"value": "'R'",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"FilePath": {
										"value": {
											"value": "@variables('RawFilePath')",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "GetColumnMapping",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateCurrentExecutionLog",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[dbo].[sp_getColumnMapping]",
									"storedProcedureParameters": {
										"table_name": {
											"type": "String",
											"value": {
												"value": "@string(item().Object)",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "GetSetMetadata",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Copy Raw To Structured",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "GetColumnMapping",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@json(activity('GetColumnMapping').output.firstRow.json_output)",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "Raw",
									"type": "DatasetReference",
									"parameters": {
										"File": {
											"value": "@variables('RawFilePath')",
											"type": "Expression"
										},
										"Directory": {
											"value": "@string(item().Object)",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ADLStructured",
									"type": "DatasetReference",
									"parameters": {
										"File": {
											"value": "@variables('StructuredFilePath')",
											"type": "Expression"
										},
										"Directory": {
											"value": "@item().Object",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "StructuredFilePathName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "RawFilePathName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "StructuredFilePath",
								"value": {
									"value": "@concat(formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'), '/', string(item().SinkFileName),'_', pipeline().parameters.executionId, '.parquet')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "UpdateCurrentExecutionLog_Structured",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Raw To Structured",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineFilePathName]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"FilePath": {
										"value": {
											"value": "@variables('StructuredFilePath')",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ADLContainer": {
										"value": "S",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Data Lake exist",
							"type": "GetMetadata",
							"dependsOn": [
								{
									"activity": "UpdateCurrentExecutionLog_Structured",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ADLCurrent_Directory",
									"type": "DatasetReference",
									"parameters": {
										"Directory": {
											"value": "@item().Object",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "Is initial load",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Data Lake exist",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(toLower(trim(string(activity('Data Lake exist').output.exists))), 'false')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Incremental Load",
										"type": "ExecuteDataFlow",
										"dependsOn": [],
										"policy": {
											"timeout": "1.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataflow": {
												"referenceName": "DF_ADL2STRUCTUREDToCURRENT_CDC",
												"type": "DataFlowReference",
												"parameters": {
													"File": {
														"value": "'@{variables('StructuredFilePath')}'",
														"type": "Expression"
													},
													"Directory": {
														"value": "'@{variables('Object')}'",
														"type": "Expression"
													},
													"ExecutionDate": {
														"value": "toTimestamp(left('@{pipeline().TriggerTime}', 23), 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
														"type": "Expression"
													},
													"RunId": {
														"value": "'@{pipeline().parameters.executionId}'",
														"type": "Expression"
													}
												},
												"datasetParameters": {
													"StructuredFile": {
														"File": {
															"value": "@variables('StructuredFilePath')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('Object')",
															"type": "Expression"
														}
													},
													"CurrentLookup": {
														"Directory": {
															"value": "@variables('Object')",
															"type": "Expression"
														}
													},
													"CurrentSink": {
														"Directory": {
															"value": "@variables('Object')",
															"type": "Expression"
														}
													}
												}
											},
											"compute": {
												"coreCount": 8,
												"computeType": "General"
											},
											"traceLevel": "Fine"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Initial Load",
										"type": "ExecuteDataFlow",
										"dependsOn": [],
										"policy": {
											"timeout": "1.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataflow": {
												"referenceName": "DF_ADL2STRUCTUREDToCURRENT_InitialLoad",
												"type": "DataFlowReference",
												"parameters": {
													"File": {
														"value": "'@{variables('StructuredFilePath')}'",
														"type": "Expression"
													},
													"Directory": {
														"value": "'@{variables('Object')}'",
														"type": "Expression"
													},
													"ExecutionDate": {
														"value": "toTimestamp(left('@{pipeline().TriggerTime}', 23), 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
														"type": "Expression"
													},
													"RunId": {
														"value": "'@{pipeline().parameters.executionId}'",
														"type": "Expression"
													}
												},
												"datasetParameters": {
													"StructuredFile": {
														"File": {
															"value": "@variables('StructuredFilePath')",
															"type": "Expression"
														},
														"Directory": {
															"value": "@variables('Object')",
															"type": "Expression"
														}
													},
													"Current": {
														"Directory": {
															"value": "@variables('Object')",
															"type": "Expression"
														}
													}
												}
											},
											"compute": {
												"coreCount": 8,
												"computeType": "General"
											},
											"traceLevel": "Fine"
										}
									}
								]
							}
						},
						{
							"name": "ObjectName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Last Execution Date",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RawFilePath",
								"value": {
									"value": "@item().Object",
									"type": "Expression"
								}
							}
						},
						{
							"name": "UpdateCurrentExecutionLog_Current",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Is initial load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineFilePathName]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"FilePath": {
										"value": {
											"value": "@variables('StructuredFilePath')",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ADLContainer": {
										"value": "C",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Last Execution Date",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Get Original Parameters",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT  [LastExecution] FROM [procfwk].[GetMaxExecutionLogDateTime] WHERE  [StageId] = ', string(pipeline().parameters.stageId), ' AND [PipelineId] = ', string(pipeline().parameters.pipelineId), ' and [PipelineParamsUsed] = ', '''', string(activity('Get Original Parameters').output.value), '''')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ETL",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Get Original Parameters",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT  [PipelineParamsUsed] FROM [procfwk].[GetCurrentExecution] WHERE  [PipelineId] = ', string(pipeline().parameters.pipelineId), ' AND [LocalExecutionId] = ', '''', pipeline().parameters.executionId, '''')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ETL",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						}
					]
				}
			},
			{
				"name": "ETL Table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('Select * From dbo.CurrentETL Where ETLId = ', pipeline().parameters.ETLId)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ETL",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"executionId": {
				"type": "string",
				"defaultValue": "E5BB6991-C0D9-482D-9B34-CB6F43315FAF"
			},
			"stageId": {
				"type": "int",
				"defaultValue": 1
			},
			"pipelineId": {
				"type": "int",
				"defaultValue": 1
			},
			"ETLId": {
				"type": "string",
				"defaultValue": "1"
			}
		},
		"variables": {
			"RawFilePath": {
				"type": "String"
			},
			"StructuredFilePath": {
				"type": "String"
			},
			"Object": {
				"type": "String"
			},
			"LastExecutedDate": {
				"type": "String"
			}
		},
		"annotations": []
	}
}