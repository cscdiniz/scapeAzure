{
	"name": "LoadSourceToDataLake",
	"properties": {
		"activities": [
			{
				"name": "For Each Active ETL",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ETL Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('ETL Table').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "RawFilePathName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "ObjectName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RawFilePath",
								"value": {
									"value": "@concat(formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'), '/', string(item().SinkFileName),'_', pipeline().parameters.executionId, '.', string(item().SinkFileFormat))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "StructuredFilePathName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "RawFilePathName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "StructuredFilePath",
								"value": {
									"value": "@concat(formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'), '/', string(item().SinkFileName),'_', pipeline().parameters.executionId, '.parquet')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "ObjectName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Last Execution Date",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "Object",
								"value": {
									"value": "@item().Object",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Last Execution Date",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Get Original Parameters",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT  [LastExecution] FROM [procfwk].[GetMaxExecutionLogDateTime] WHERE  [StageId] = ', string(pipeline().parameters.stageId), ' AND [PipelineId] = ', string(pipeline().parameters.pipelineId))",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ETL",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Get Original Parameters",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT  [PipelineParamsUsed] FROM [procfwk].[GetCurrentExecution] WHERE  [PipelineId] = ', string(pipeline().parameters.pipelineId), ' AND [LocalExecutionId] = ', '''', pipeline().parameters.executionId, '''')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ETL",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Copy API To RAW",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "StructuredFilePathName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "CopyApiToRaw",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"url": {
										"value": "@string(item().SourceUrl)",
										"type": "Expression"
									},
									"parameter": {
										"value": "@if(bool(item().IsIncrementalLoad),concat(item().CompleteParameter,'''',if(empty(activity('Last Execution Date').output?.firstRow?.LastExecution),'1900-01-01',formatDateTime(activity('Last Execution Date').output?.firstRow?.LastExecution,'yyyy-MM-dd HH:mm:ss')), ''''), item().CompleteParameter)",
										"type": "Expression"
									},
									"file": {
										"value": "@variables('RawFilePath')",
										"type": "Expression"
									},
									"directory": {
										"value": "@variables('Object')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Copy Raw To Structured",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Copy API To RAW",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "CopyRawToStructured",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"RawFile": {
										"value": "@variables('RawFilePath')",
										"type": "Expression"
									},
									"RawDiretory": {
										"value": "@string(item().Object)",
										"type": "Expression"
									},
									"StructuredFile": {
										"value": "@variables('StructuredFilePath')",
										"type": "Expression"
									},
									"StructuredDirectory": {
										"value": "@string(item().Object)",
										"type": "Expression"
									},
									"ExecutionId": {
										"value": "@pipeline().parameters.executionId",
										"type": "Expression"
									},
									"PipelineId": {
										"value": "@pipeline().parameters.pipelineId",
										"type": "Expression"
									},
									"StageId": {
										"value": "@pipeline().parameters.stageId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Copy Structured To Current",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Copy Raw To Structured",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "CopyStructuredToCurrent",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"StructuredFile": {
										"value": "@variables('StructuredFilePath')",
										"type": "Expression"
									},
									"StructuredDirectory": {
										"value": "@variables('Object')",
										"type": "Expression"
									},
									"ExecutionId": {
										"value": "@pipeline().parameters.executionId",
										"type": "Expression"
									},
									"PipelineId": {
										"value": "@pipeline().parameters.pipelineId",
										"type": "Expression"
									},
									"StageId": {
										"value": "@pipeline().parameters.stageId",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "ETL Table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('Select * From dbo.CurrentETL Where ETLId = ', pipeline().parameters.ETLId)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ETL",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"executionId": {
				"type": "string",
				"defaultValue": "E5BB6991-C0D9-482D-9B34-CB6F43315FAF"
			},
			"stageId": {
				"type": "int",
				"defaultValue": 1
			},
			"pipelineId": {
				"type": "int",
				"defaultValue": 1
			},
			"ETLId": {
				"type": "string",
				"defaultValue": "1"
			}
		},
		"variables": {
			"RawFilePath": {
				"type": "String"
			},
			"StructuredFilePath": {
				"type": "String"
			},
			"Object": {
				"type": "String"
			},
			"LastExecutedDate": {
				"type": "String"
			}
		},
		"annotations": []
	}
}